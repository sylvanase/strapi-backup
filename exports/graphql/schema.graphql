type AdminUser {
  id: ID!
  username: String
}

type Contact {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  email: String
  phone: String
  message: String
  test: String
  created_by: AdminUser
  updated_by: AdminUser
}

type ContactAggregator {
  count: Int
  totalCount: Int
}

type ContactConnection {
  values: [Contact]
  groupBy: ContactGroupBy
  aggregate: ContactAggregator
}

type ContactConnectionCreated_at {
  key: DateTime
  connection: ContactConnection
}

type ContactConnectionCreated_by {
  key: ID
  connection: ContactConnection
}

type ContactConnectionEmail {
  key: String
  connection: ContactConnection
}

type ContactConnectionId {
  key: ID
  connection: ContactConnection
}

type ContactConnectionMessage {
  key: String
  connection: ContactConnection
}

type ContactConnectionName {
  key: String
  connection: ContactConnection
}

type ContactConnectionPhone {
  key: String
  connection: ContactConnection
}

type ContactConnectionTest {
  key: String
  connection: ContactConnection
}

type ContactConnectionUpdated_at {
  key: DateTime
  connection: ContactConnection
}

type ContactConnectionUpdated_by {
  key: ID
  connection: ContactConnection
}

type ContactGroupBy {
  id: [ContactConnectionId]
  created_at: [ContactConnectionCreated_at]
  updated_at: [ContactConnectionUpdated_at]
  name: [ContactConnectionName]
  email: [ContactConnectionEmail]
  phone: [ContactConnectionPhone]
  message: [ContactConnectionMessage]
  test: [ContactConnectionTest]
  created_by: [ContactConnectionCreated_by]
  updated_by: [ContactConnectionUpdated_by]
}

input ContactInput {
  name: String
  email: String
  phone: String
  message: String
  test: String
  created_by: ID
  updated_by: ID
}

input createContactInput {
  data: ContactInput
}

type createContactPayload {
  contact: Contact
}

input createFollowerInput {
  data: FollowerInput
}

type createFollowerPayload {
  follower: Followers
}

input createFollowingInput {
  data: FollowingInput
}

type createFollowingPayload {
  following: Following
}

input createNewlistInput {
  data: NewlistInput
}

type createNewlistPayload {
  newlist: Newlist
}

input createPostInput {
  data: PostInput
}

type createPostPayload {
  post: Post
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createTagInput {
  data: TagInput
}

type createTagPayload {
  tag: Tag
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input deleteContactInput {
  where: InputID
}

type deleteContactPayload {
  contact: Contact
}

input deleteFollowerInput {
  where: InputID
}

type deleteFollowerPayload {
  follower: Followers
}

input deleteFollowingInput {
  where: InputID
}

type deleteFollowingPayload {
  following: Following
}

type deleteGeneralPayload {
  general: General
}

input deleteNewlistInput {
  where: InputID
}

type deleteNewlistPayload {
  newlist: Newlist
}

input deletePostInput {
  where: InputID
}

type deletePostPayload {
  post: Post
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteTagInput {
  where: InputID
}

type deleteTagPayload {
  tag: Tag
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editContactInput {
  name: String
  email: String
  phone: String
  message: String
  test: String
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFollowerInput {
  name: String
  htmlUrl: String
  avatarUrl: ID
  created_by: ID
  updated_by: ID
}

input editFollowingInput {
  name: String
  avatarUrl: ID
  htmlUrl: String
  created_by: ID
  updated_by: ID
}

input editGeneralInput {
  title: String
  subtitle: String
  cover: ID
  created_by: ID
  updated_by: ID
}

input editNewlistInput {
  title: String
  content: String
  description: String
  createTime: DateTime
  updateTime: DateTime
  created_by: ID
  updated_by: ID
}

input editPostInput {
  title: String
  content: String
  is_publish: Boolean
  tags: [ID]
  cover: ID
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editTagInput {
  title: String
  posts: [ID]
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input FollowerInput {
  name: String
  htmlUrl: String
  avatarUrl: ID
  created_by: ID
  updated_by: ID
}

type Followers {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  htmlUrl: String
  avatarUrl: UploadFile
  created_by: AdminUser
  updated_by: AdminUser
}

type FollowersAggregator {
  count: Int
  totalCount: Int
}

type FollowersConnection {
  values: [Followers]
  groupBy: FollowersGroupBy
  aggregate: FollowersAggregator
}

type FollowersConnectionAvatarUrl {
  key: ID
  connection: FollowersConnection
}

type FollowersConnectionCreated_at {
  key: DateTime
  connection: FollowersConnection
}

type FollowersConnectionCreated_by {
  key: ID
  connection: FollowersConnection
}

type FollowersConnectionHtmlUrl {
  key: String
  connection: FollowersConnection
}

type FollowersConnectionId {
  key: ID
  connection: FollowersConnection
}

type FollowersConnectionName {
  key: String
  connection: FollowersConnection
}

type FollowersConnectionUpdated_at {
  key: DateTime
  connection: FollowersConnection
}

type FollowersConnectionUpdated_by {
  key: ID
  connection: FollowersConnection
}

type FollowersGroupBy {
  id: [FollowersConnectionId]
  created_at: [FollowersConnectionCreated_at]
  updated_at: [FollowersConnectionUpdated_at]
  name: [FollowersConnectionName]
  htmlUrl: [FollowersConnectionHtmlUrl]
  avatarUrl: [FollowersConnectionAvatarUrl]
  created_by: [FollowersConnectionCreated_by]
  updated_by: [FollowersConnectionUpdated_by]
}

type Following {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  avatarUrl: UploadFile
  htmlUrl: String
  created_by: AdminUser
  updated_by: AdminUser
}

type FollowingAggregator {
  count: Int
  totalCount: Int
}

type FollowingConnection {
  values: [Following]
  groupBy: FollowingGroupBy
  aggregate: FollowingAggregator
}

type FollowingConnectionAvatarUrl {
  key: ID
  connection: FollowingConnection
}

type FollowingConnectionCreated_at {
  key: DateTime
  connection: FollowingConnection
}

type FollowingConnectionCreated_by {
  key: ID
  connection: FollowingConnection
}

type FollowingConnectionHtmlUrl {
  key: String
  connection: FollowingConnection
}

type FollowingConnectionId {
  key: ID
  connection: FollowingConnection
}

type FollowingConnectionName {
  key: String
  connection: FollowingConnection
}

type FollowingConnectionUpdated_at {
  key: DateTime
  connection: FollowingConnection
}

type FollowingConnectionUpdated_by {
  key: ID
  connection: FollowingConnection
}

type FollowingGroupBy {
  id: [FollowingConnectionId]
  created_at: [FollowingConnectionCreated_at]
  updated_at: [FollowingConnectionUpdated_at]
  name: [FollowingConnectionName]
  avatarUrl: [FollowingConnectionAvatarUrl]
  htmlUrl: [FollowingConnectionHtmlUrl]
  created_by: [FollowingConnectionCreated_by]
  updated_by: [FollowingConnectionUpdated_by]
}

input FollowingInput {
  name: String
  avatarUrl: ID
  htmlUrl: String
  created_by: ID
  updated_by: ID
}

type General {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  subtitle: String
  cover: UploadFile
  created_by: AdminUser
  updated_by: AdminUser
}

input GeneralInput {
  title: String
  subtitle: String
  cover: ID
  created_by: ID
  updated_by: ID
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Contact | ContactConnection | ContactAggregator | ContactGroupBy | ContactConnectionId | ContactConnectionCreated_at | ContactConnectionUpdated_at | ContactConnectionName | ContactConnectionEmail | ContactConnectionPhone | ContactConnectionMessage | ContactConnectionTest | ContactConnectionCreated_by | ContactConnectionUpdated_by | createContactPayload | updateContactPayload | deleteContactPayload | Followers | FollowersConnection | FollowersAggregator | FollowersGroupBy | FollowersConnectionId | FollowersConnectionCreated_at | FollowersConnectionUpdated_at | FollowersConnectionName | FollowersConnectionHtmlUrl | FollowersConnectionAvatarUrl | FollowersConnectionCreated_by | FollowersConnectionUpdated_by | createFollowerPayload | updateFollowerPayload | deleteFollowerPayload | Following | FollowingConnection | FollowingAggregator | FollowingGroupBy | FollowingConnectionId | FollowingConnectionCreated_at | FollowingConnectionUpdated_at | FollowingConnectionName | FollowingConnectionAvatarUrl | FollowingConnectionHtmlUrl | FollowingConnectionCreated_by | FollowingConnectionUpdated_by | createFollowingPayload | updateFollowingPayload | deleteFollowingPayload | General | updateGeneralPayload | deleteGeneralPayload | Newlist | NewlistConnection | NewlistAggregator | NewlistGroupBy | NewlistConnectionId | NewlistConnectionCreated_at | NewlistConnectionUpdated_at | NewlistConnectionTitle | NewlistConnectionContent | NewlistConnectionDescription | NewlistConnectionCreateTime | NewlistConnectionUpdateTime | NewlistConnectionCreated_by | NewlistConnectionUpdated_by | createNewlistPayload | updateNewlistPayload | deleteNewlistPayload | Post | PostConnection | PostAggregator | PostGroupBy | PostConnectionId | PostConnectionCreated_at | PostConnectionUpdated_at | PostConnectionTitle | PostConnectionContent | PostConnectionIs_publish | PostConnectionCover | PostConnectionCreated_by | PostConnectionUpdated_by | createPostPayload | updatePostPayload | deletePostPayload | Tag | TagConnection | TagAggregator | TagGroupBy | TagConnectionId | TagConnectionCreated_at | TagConnectionUpdated_at | TagConnectionTitle | TagConnectionCreated_by | TagConnectionUpdated_by | createTagPayload | updateTagPayload | deleteTagPayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UploadFileConnectionCreated_by | UploadFileConnectionUpdated_by | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsRoleConnectionCreated_by | UsersPermissionsRoleConnectionUpdated_by | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionCreated_by | UsersPermissionsUserConnectionUpdated_by | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createContact(input: createContactInput): createContactPayload
  updateContact(input: updateContactInput): updateContactPayload
  deleteContact(input: deleteContactInput): deleteContactPayload
  createFollower(input: createFollowerInput): createFollowerPayload
  updateFollower(input: updateFollowerInput): updateFollowerPayload
  deleteFollower(input: deleteFollowerInput): deleteFollowerPayload
  createFollowing(input: createFollowingInput): createFollowingPayload
  updateFollowing(input: updateFollowingInput): updateFollowingPayload
  deleteFollowing(input: deleteFollowingInput): deleteFollowingPayload
  updateGeneral(input: updateGeneralInput): updateGeneralPayload
  deleteGeneral: deleteGeneralPayload
  createNewlist(input: createNewlistInput): createNewlistPayload
  updateNewlist(input: updateNewlistInput): updateNewlistPayload
  deleteNewlist(input: deleteNewlistInput): deleteNewlistPayload
  createPost(input: createPostInput): createPostPayload
  updatePost(input: updatePostInput): updatePostPayload
  deletePost(input: deletePostInput): deletePostPayload
  createTag(input: createTagInput): createTagPayload
  updateTag(input: updateTagInput): updateTagPayload
  deleteTag(input: deleteTagInput): deleteTagPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

type Newlist {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  content: String
  description: String
  createTime: DateTime
  updateTime: DateTime
  created_by: AdminUser
  updated_by: AdminUser
}

type NewlistAggregator {
  count: Int
  totalCount: Int
}

type NewlistConnection {
  values: [Newlist]
  groupBy: NewlistGroupBy
  aggregate: NewlistAggregator
}

type NewlistConnectionContent {
  key: String
  connection: NewlistConnection
}

type NewlistConnectionCreated_at {
  key: DateTime
  connection: NewlistConnection
}

type NewlistConnectionCreated_by {
  key: ID
  connection: NewlistConnection
}

type NewlistConnectionCreateTime {
  key: DateTime
  connection: NewlistConnection
}

type NewlistConnectionDescription {
  key: String
  connection: NewlistConnection
}

type NewlistConnectionId {
  key: ID
  connection: NewlistConnection
}

type NewlistConnectionTitle {
  key: String
  connection: NewlistConnection
}

type NewlistConnectionUpdated_at {
  key: DateTime
  connection: NewlistConnection
}

type NewlistConnectionUpdated_by {
  key: ID
  connection: NewlistConnection
}

type NewlistConnectionUpdateTime {
  key: DateTime
  connection: NewlistConnection
}

type NewlistGroupBy {
  id: [NewlistConnectionId]
  created_at: [NewlistConnectionCreated_at]
  updated_at: [NewlistConnectionUpdated_at]
  title: [NewlistConnectionTitle]
  content: [NewlistConnectionContent]
  description: [NewlistConnectionDescription]
  createTime: [NewlistConnectionCreateTime]
  updateTime: [NewlistConnectionUpdateTime]
  created_by: [NewlistConnectionCreated_by]
  updated_by: [NewlistConnectionUpdated_by]
}

input NewlistInput {
  title: String
  content: String
  description: String
  createTime: DateTime
  updateTime: DateTime
  created_by: ID
  updated_by: ID
}

type Post {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String!
  content: String!
  is_publish: Boolean!
  cover: UploadFile
  created_by: AdminUser
  updated_by: AdminUser
  tags(sort: String, limit: Int, start: Int, where: JSON): [Tag]
}

type PostAggregator {
  count: Int
  totalCount: Int
}

type PostConnection {
  values: [Post]
  groupBy: PostGroupBy
  aggregate: PostAggregator
}

type PostConnectionContent {
  key: String
  connection: PostConnection
}

type PostConnectionCover {
  key: ID
  connection: PostConnection
}

type PostConnectionCreated_at {
  key: DateTime
  connection: PostConnection
}

type PostConnectionCreated_by {
  key: ID
  connection: PostConnection
}

type PostConnectionId {
  key: ID
  connection: PostConnection
}

type PostConnectionIs_publish {
  key: Boolean
  connection: PostConnection
}

type PostConnectionTitle {
  key: String
  connection: PostConnection
}

type PostConnectionUpdated_at {
  key: DateTime
  connection: PostConnection
}

type PostConnectionUpdated_by {
  key: ID
  connection: PostConnection
}

type PostGroupBy {
  id: [PostConnectionId]
  created_at: [PostConnectionCreated_at]
  updated_at: [PostConnectionUpdated_at]
  title: [PostConnectionTitle]
  content: [PostConnectionContent]
  is_publish: [PostConnectionIs_publish]
  cover: [PostConnectionCover]
  created_by: [PostConnectionCreated_by]
  updated_by: [PostConnectionUpdated_by]
}

input PostInput {
  title: String!
  content: String!
  is_publish: Boolean
  tags: [ID]
  cover: ID
  created_by: ID
  updated_by: ID
}

type Query {
  contact(id: ID!): Contact
  contacts(sort: String, limit: Int, start: Int, where: JSON): [Contact]
  contactsConnection(sort: String, limit: Int, start: Int, where: JSON): ContactConnection
  follower(id: ID!): Followers
  followers(sort: String, limit: Int, start: Int, where: JSON): [Followers]
  followersConnection(sort: String, limit: Int, start: Int, where: JSON): FollowersConnection
  following(id: ID!): Following
  followings(sort: String, limit: Int, start: Int, where: JSON): [Following]
  followingsConnection(sort: String, limit: Int, start: Int, where: JSON): FollowingConnection
  general: General
  newlist(id: ID!): Newlist
  newlists(sort: String, limit: Int, start: Int, where: JSON): [Newlist]
  newlistsConnection(sort: String, limit: Int, start: Int, where: JSON): NewlistConnection
  post(id: ID!): Post
  posts(sort: String, limit: Int, start: Int, where: JSON): [Post]
  postsConnection(sort: String, limit: Int, start: Int, where: JSON): PostConnection
  tag(id: ID!): Tag
  tags(sort: String, limit: Int, start: Int, where: JSON): [Tag]
  tagsConnection(sort: String, limit: Int, start: Int, where: JSON): TagConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

type Tag {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  created_by: AdminUser
  updated_by: AdminUser
  posts(sort: String, limit: Int, start: Int, where: JSON): [Post]
}

type TagAggregator {
  count: Int
  totalCount: Int
}

type TagConnection {
  values: [Tag]
  groupBy: TagGroupBy
  aggregate: TagAggregator
}

type TagConnectionCreated_at {
  key: DateTime
  connection: TagConnection
}

type TagConnectionCreated_by {
  key: ID
  connection: TagConnection
}

type TagConnectionId {
  key: ID
  connection: TagConnection
}

type TagConnectionTitle {
  key: String
  connection: TagConnection
}

type TagConnectionUpdated_at {
  key: DateTime
  connection: TagConnection
}

type TagConnectionUpdated_by {
  key: ID
  connection: TagConnection
}

type TagGroupBy {
  id: [TagConnectionId]
  created_at: [TagConnectionCreated_at]
  updated_at: [TagConnectionUpdated_at]
  title: [TagConnectionTitle]
  created_by: [TagConnectionCreated_by]
  updated_by: [TagConnectionUpdated_by]
}

input TagInput {
  title: String
  posts: [ID]
  created_by: ID
  updated_by: ID
}

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

input updateContactInput {
  where: InputID
  data: editContactInput
}

type updateContactPayload {
  contact: Contact
}

input updateFollowerInput {
  where: InputID
  data: editFollowerInput
}

type updateFollowerPayload {
  follower: Followers
}

input updateFollowingInput {
  where: InputID
  data: editFollowingInput
}

type updateFollowingPayload {
  following: Following
}

input updateGeneralInput {
  data: editGeneralInput
}

type updateGeneralPayload {
  general: General
}

input updateNewlistInput {
  where: InputID
  data: editNewlistInput
}

type updateNewlistPayload {
  newlist: Newlist
}

input updatePostInput {
  where: InputID
  data: editPostInput
}

type updatePostPayload {
  post: Post
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateTagInput {
  where: InputID
  data: editTagInput
}

type updateTagPayload {
  tag: Tag
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  created_by: AdminUser
  updated_by: AdminUser
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_by {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_by {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
  created_by: [UploadFileConnectionCreated_by]
  updated_by: [UploadFileConnectionUpdated_by]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
  created_by: AdminUser
  updated_by: AdminUser
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  created_by: AdminUser
  updated_by: AdminUser
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnectionCreated_by {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionUpdated_by {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
  created_by: [UsersPermissionsRoleConnectionCreated_by]
  updated_by: [UsersPermissionsRoleConnectionUpdated_by]
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  created_by: AdminUser
  updated_by: AdminUser
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_by {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_by {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
  created_by: [UsersPermissionsUserConnectionCreated_by]
  updated_by: [UsersPermissionsUserConnectionUpdated_by]
}
